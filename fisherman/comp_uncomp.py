# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/03_compuncomp.ipynb (unless otherwise specified).

__all__ = ['compute_uncompute_overlap']

# Cell
import numpy as np

from qiskit import QuantumCircuit
from qiskit.providers import Backend
from qiskit.utils import QuantumInstance
from qiskit.circuit import ParameterExpression
from qiskit.opflow import ListOp, StateFn, PrimitiveOp, ExpectationBase, CircuitSampler

from typing import Optional, Union, Dict, List

# Cell
def compute_uncompute_overlap(
    state0: StateFn,
    state1: Optional[Union[StateFn, ListOp]] = None,
    param_dict: Optional[Dict[ParameterExpression, List[float]]] = None,
    n_rnd: Optional[int] = None,
    local: Optional[bool] = True,
    expectation: Optional[ExpectationBase] = None,
    backend: Optional[Union[Backend, QuantumInstance]] = None
) -> np.ndarray:

    if state1 is not None and param_dict is not None:
        raise ValueError(
            "swap_test_overlap only accepts one optional input "
            "either `state1` or `param_dict`."
                        )

    if param_dict is not None:
        states = state0.bind_parameters(param_dict)
        observable = ~states @ states
    elif state1 is not None:
        states = state1 if isinstance(state1, ListOp) else ListOp([state1])
        observable = ~state0 @ states
    else:
        observable = ~state0 @ state0

    if expectation is not None:
        observable = expectation.convert(observable)

    if backend is not None:
        observable = CircuitSampler(backend).convert(observable)

    overlap = np.abs(observable.eval())**2
    return overlap